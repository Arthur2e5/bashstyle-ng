#!/bin/bash
#########################################################
# 							#
# This is BashStyle-NG					#
#							#
# Licensed under GNU GENERAL PUBLIC LICENSE v3    	#
#							#
# Copyright 2007 - 2013 Christopher Bratusek		#
#							#
#########################################################

function d2u () {

	if [[ -f "$1" ]]; then
		sed -r 's/\r$//' -i "$1"
	fi

}

function u2d () {

	if [[ -f "$1" ]]; then
		sed -r 's/$/\r/' -i "$1"
	fi

}

##### BINARY -> X #####

function bin2oct () {

	if [[ $1 ]]; then
		echo "obase=8 ; ibase=2 ; $1" | bc
	fi

}

function bin2dec () {

	if [[ $1 ]]; then
		echo $((2#$1))
	fi

}

function bin2hex () {

	if [[ $1 ]]; then
		echo "obase=16 ; ibase=2 ; $1" | bc
	fi

}

function bin2b32 () {

	if [[ $1 ]]; then
		echo "obase=32 ; ibase=2 ; $1 " | bc
	fi

}

function bin2b64 () {

	if [[ $1 ]]; then
		echo "obase=64 ; ibase=2 ; $1" | bc
	fi
}

function bin2asc () {

	if [[ $1 ]]; then
		echo -e "\0$(printf %o $((2#$1)))"
	fi

}

function bin2all () {

	if [[ $1 ]]; then
		echo "binary $1 = octal $(bin2oct $1)"
		echo "binary $1 = decimal $(bin2dec $1)"
		echo "binary $1 = hexadecimal $(bin2hex $1)"
		echo "binary $1 = base32 $(bin2b32 $1)"
		echo "binary $1 = base64 $(bin2b64 $1)"
		echo "binary $1 = ascii $(bin2asc $1)"
	fi

}

##### OCTAL -> X #####

function oct2bin () {

	if [[ $1 ]]; then
		echo "obase=2 ; ibase=8 ; $1" | bc
	fi

}

function oct2dec () {

	if [[ $1 ]]; then
		echo $((8#$1))
	fi

}

function oct2hex () {

	if [[ $1 ]]; then
		echo "obase=16 ; ibase=8 ; $1" | bc
	fi

}

function oct2b32 () {

	if [[ $1 ]]; then
		echo "obase=32 ; ibase=8 ; $1" | bc
	fi

}

function oct2b64 () {

	if [[ $1 ]]; then
		echo "obase=64 ; ibase=8 ; $1" | bc
	fi

}

function oct2asc () {

	if [[ $1 ]]; then
		echo -e "\0$(printf %o $((8#$1)))"
	fi

}


function oct2all () {

	if [[ $1 ]]; then
		echo "octal $1 = binary $(function oct2bin $1)"
		echo "octal $1 = decimal $(function oct2dec $1)"
		echo "octal $1 = hexadecimal $(function oct2hex $1)"
		echo "octal $1 = base32 $(function oct2b32 $1)"
		echo "octal $1 = base64 $(function oct2b64 $1)"
		echo "octal $1 = ascii $(function oct2asc $1)"
	fi

}

##### DECIMAL -> X #####

function dec2bin () {

	if [[ $1 ]]; then
		echo "obase=2 ; $1" | bc
	fi

}

function dec2oct () {

	if [[ $1 ]]; then
		echo "obase=8 ; $1" | bc
	fi

}

function dec2hex () {

	if [[ $1 ]]; then
		echo "obase=16 ; $1" | bc

	fi

}

function dec2b32 () {

	if [[ $1 ]]; then
		echo "obase=32 ; $1" | bc
	fi

}

function dec2b64 () {

	if [[ $1 ]]; then
		echo "obase=64 ; $1" | bc
	fi

}

function dec2asc () {

	if [[ $1 ]]; then
		echo -e "\0$(printf %o 97)"
	fi

}

function dec2all () {

	if [[ $1 ]]; then
		echo "decimal $1 = binary $(function dec2bin $1)"
		echo "decimal $1 = octal $(function dec2oct $1)"
		echo "decimal $1 = hexadecimal $(function dec2hex $1)"
		echo "decimal $1 = base32 $(function dec2b32 $1)"
		echo "decimal $1 = base64 $(function dec2b64 $1)"
		echo "deciaml $1 = ascii $(function dec2asc $1)"
	fi

}

##### HEXADECIMAL -> X #####

function hex2bin () {

	if [[ $1 ]]; then
		echo "obase=2 ; ibase=16 ; $1" | bc
	fi

}

function hex2oct () {

	if [[ $1 ]]; then
		echo "obase=8 ; ibase=16 ; $1" | bc
	fi

}


function hex2dec () {

	if [[ $1 ]]; then
		 echo $((16#$1))
	fi

}

function hex2b32 () {

	if [[ $1 ]]; then
		echo "obase=32 ; ibase=16 ; $1" | bc
	fi

}

function hex2b64 () {

	if [[ $1 ]]; then
		echo "obase=64 ; ibase=16 ; $1" | bc
	fi

}

function hex2asc () {

	if [[ $1 ]]; then
		echo -e "\0$(printf %o $((16#$1)))"
	fi

}

function hex2all () {

	if [[ $1 ]]; then
		echo "hexadecimal $1 = binary $(function hex2bin $1)"
		echo "hexadecimal $1 = octal $(function hex2oct $1)"
		echo "hexadecimal $1 = decimal $(function hex2dec $1)"
		echo "hexadecimal $1 = base32 $(function hex2b32 $1)"
		echo "hexadecimal $1 = base64 $(function hex2b64 $1)"
		echo "hexadecimal $1 = ascii $(function hex2asc $1)"
	fi

}

##### ASCII -> X #####

asc2dec () {

	if [[ $1 ]]; then
		printf '%d\n' "'$1'"
	fi

}

asc2bin () {

	if [[ $1 ]]; then
		echo "obase=2 ; $(asc2dec $1)" | bc
	fi

}

asc2oct () {

	if [[ $1 ]]; then
		echo "obase=8 ; $(asc2dec $1)" | bc
	fi

}

asc2hex () {

	if [[ $1 ]]; then
		echo "obase=16 ; $(asc2dec $1)" | bc
	fi

}

asc2b32 () {

	if [[ $1 ]]; then
		echo "obase=32 ; $(asc2dec $1)" | bc
	fi

}

asc2b64 () {

	if [[ $1 ]]; then
		echo "obase=64 ; $(asc2dec $1)" | bc
	fi

}

asc2all () {

	if [[ $1 ]]; then
		echo "ascii $1 = binary $(asc2bin $1)"
		echo "ascii $1 = octal $(asc2oct $1)"
		echo "ascii $1 = decimal $(asc2dec $1)"
		echo "ascii $1 = hexadecimal $(asc2hex $1)"
		echo "ascii $1 = base32 $(asc2b32 $1)"
		echo "ascii $1 = base64 $(asc2b64 $1)"
	fi

}

##### DECIMAL (INTEGER | FLOATINGPOINT) #####

function round () {

	if [[ $1 ]]; then
		if [[ $2 ]]; then
			echo "$(printf %.${2}f $1)"
		else	echo "$(printf %.0f $1)"
		fi
	fi

}

function radical () {

	if [[ $1 ]]; then
		echo "sqrt($1)" | bc -l
	fi

}

power () {

	if [[ $1 ]]; then
		if [[ $2 ]]; then
			echo "$1 ^ $2" | bc
		else	echo "$1 ^ 2" | bc
		fi
	fi

}

##### DEGREES #####

function fah2cel () {

  if [[ $1 ]]; then
	echo "scale=2 ; ( $1 - 32  ) / 1.8" | bc
  fi

}

function fah2kel () {

  if [[ $1 ]]; then
	echo "scale=2; ( $1 + 459.67 ) / 1.8 " | bc
  fi

}

function cel2fah () {

  if [[ $1 ]]; then
	echo "scale=2; $1 * 1.8  + 32" | bc
  fi

}

function cel2kel () {

  if [[ $1 ]]; then
	echo "scale=2; $1 + 237.15" | bc
  fi

}

function kel2fah () {

  if [[ $1 ]]; then
	echo "scale=2; $1 * 1.8 - 459,67" | bc
  fi

}

function kel2cel () {

  if [[ $1 ]]; then
	echo "scale=2; $1 - 273.15" | bc
  fi

}

#### Letters ####

function arabic2roman () {

  echo $1 | sed -e 's/1...$/M&/;s/2...$/MM&/;s/3...$/MMM&/;s/4...$/MMMM&/
s/6..$/DC&/;s/7..$/DCC&/;s/8..$/DCCC&/;s/9..$/CM&/
s/1..$/C&/;s/2..$/CC&/;s/3..$/CCC&/;s/4..$/CD&/;s/5..$/D&/
s/6.$/LX&/;s/7.$/LXX&/;s/8.$/LXXX&/;s/9.$/XC&/
s/1.$/X&/;s/2.$/XX&/;s/3.$/XXX&/;s/4.$/XL&/;s/5.$/L&/
s/1$/I/;s/2$/II/;s/3$/III/;s/4$/IV/;s/5$/V/
s/6$/VI/;s/7$/VII/;s/8$/VIII/;s/9$/IX/
s/[0-9]//g'

}

function morse2text ()
{
echo $@ | tr . 0 | sed -e {s/0----\ /1/g} -e {s/00---\ /2/g} -e {s/000--\ /3/g} -e {s/000-\ /4/g} -e {s/00000\ /5/g} -e {s/-0000\ /6/g} -e {s/--000\ /7/g} -e {s/---00\ /8/g} -e {s/----0\ /9/g} -e {s/-----\ /0/g} \
	| sed -e {s/-0-0\ /c/g} -e {s/-000\ /b/g} -e {s/00-0\ /f/g} -e {s/0000\ /h/g} -e {s/0---\ /j/g} -e {s/0-00\ /l/g} -e {s/0--0\ /p/g} -e {s/--0-\ /q/g} -e {s/000-\ /v/g} -e {s/-00-\ /x/g} -e {s/-0--\ /y/g} -e {s/--00\ /z/g} \
	| sed -e {s/0--\ /w/g} -e {s/-00\ /d/g} -e {s/--0\ /g/g} -e {s/-0-\ /k/g} -e {s/---\ /o/g} -e {s/0-0\ /r/g} -e {s/000\ /s/g} -e {s/00-\ /u/g} \
	| sed -e {s/0-\ /a/g} -e {s/00\ /i/g} -e {s/--\ /m/g} -e {s/-0\ /n/g} \
	| sed -e {s/0\ /e/g} -e {s/-\ /t/g}
}
