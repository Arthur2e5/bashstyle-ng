#!/bin/bash
#########################################################
# 							#
# This is BashStyle-NG  				#
#							#
# Licensed under GNU GENERAL PUBLIC LICENSE v3    	#
#							#
# Copyright 2007 - 2015 Christopher Bratusek		#
#							#
#########################################################

. gettext.sh
TEXTDOMAIN="nx-rc"

export BSNG_PREFIX=@PREFIX@
export BSNG_DATA_DIR=@DATADIR@
export BSNG_RC_DIR=${BSNG_DATA_DIR}/bashstyle-ng/rc
export BSNG_VERSION=@VERSION@
export BSNG_YEAR="2007 - 2015"
INI_VERSION=20

source ${BSNG_RC_DIR}/internal/misc
source ${BSNG_RC_DIR}/internal/logging

if [[ ! -f ${HOME}/.bs-ng.ini ]]; then
	if [[ -f /etc/bs-ng_vendor.ini && $(ini_get ini_version) == ${INI_VERSION} ]]; then
		cp /etc/bs-ng_vendor.ini ${HOME}/.bs-ng.ini
	else
		cp ${BSNG_DATA_DIR}/bashstyle-ng/bs-ng.ini ${HOME}/.bs-ng.ini
	fi
fi

export BSNG_LOGFILE=${HOME}/.bashstyle.log
dbg_log rm -f ${BSNG_LOGFILE}
dbg_log touch ${BSNG_LOGFILE}

dbg_msg $"BashStyle-NG Starting"
dbg_msg $"BashStyle-NG Bash Major Version:" $(echo ${BASH_VERSINFO[0]})
dbg_msg $"BashStyle-NG Bash Minor Version:" $(echo ${BASH_VERSINFO[1]})
dbg_msg $"BashStyle-NG Bash Patch Level:" $(echo ${BASH_VERSINFO[2]})
dbg_msg $"BashStyle-NG Version:" ${BSNG_VERSION}
dbg_msg $"BashStyle-NG Prefix:" ${BSNG_PREFIX}
dbg_msg $"BashStyle-NG Debugging: Enabled"
dbg_msg $"BashStyle-NG Logfile:" ${BSNG_LOGFILE}

dbg_log shopt -s checkwinsize

[[ $(ini_get use_readlinecfg) == True ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/readline-rc

[[ $(ini_get use_vimcfg) == True ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/vim-rc

[[ $(ini_get use_nanocfg) == True ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/nano-rc

[[ $(ini_get enable_colors) == True ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/color-rc

[[ $(ini_get use_lscolors) == True && ${enable_colors} == True ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/ls-rc

[[ $(ini_get use_gitcfg) == True ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/git-rc

[[ $(ini_get use_keybindingscfg == True) ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/keybindings-rc

[[ $(ini_get colored_man) == True ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/man-rc

dbg_msg $"BashStyle-NG Setting:"  $"Shell Options"
dbg_log source ${BSNG_RC_DIR}/settings/shopt-rc

dbg_log source ${BSNG_RC_DIR}/settings/alias-rc

if [[ -e ${HOME}/.bashstyle.custom ]]; then
	dbg_msg $"BashStyle-NG Loading:" $"Custom Settings"
	dbg_log source ${HOME}/.bashstyle.custom
fi

if [[ $(ini_get use_bashstyle) == True ]]; then

	dbg_msg $"BashStyle-NG Loading:" $"BashStyle-NG"
	dbg_log source ${BSNG_RC_DIR}/styles/null-rc

	dbg_msg $"BashStyle-NG Setting:" $"ps2 ps3 ps4 char" $(ini_get ps234)
	ps234char=$(ini_get ps234)

	if [[ $(ini_get random_style) == True ]]; then
		dbg_msg $"BashStyle-NG Setting:" $"Random Prompt"

		number=$(random -r 11)
		case ${number} in
			0 ) pstyle=separator ;;
			1 ) pstyle=vector ;;
			2 ) pstyle=clock ;;
			3 ) pstyle=equinox ;;
			4 ) pstyle=elite ;;
			5 ) pstyle=poweruser ;;
			6 ) pstyle=dirks ;;
			7 ) pstyle=dot_prompt ;;
			8 ) pstyle=sepa_ng ;;
			9 ) pstyle=quirk ;;
			10 ) pstyle=sputnik ;;
			11 ) pstyle=ayoli ;;
		esac

		dbg_msg $"BashStyle-NG Setting:" ${pstyle} $"randomly choosen"
	else
		pstyle=$(ini_get prompt_style)
		[[ ${pstyle} == clock-ad ]] && pstyle="equinox"
	fi

	use_custom_prompt=$(ini_get use_custom_prompt)

	if [[ ${use_custom_prompt} == True ]]; then
		dbg_msg $"BashStyle-NG Setting:" $"Custom Prompt"
		dbg_log source ${BSNG_RC_DIR}/styles/custom-rc
	elif [[ -e ${BSNG_RC_DIR}/styles/${pstyle}-rc ]]; then
		dbg_msg $"BashStyle-NG Setting:" ${pstyle} $"Prompt"
		dbg_log source ${BSNG_RC_DIR}/styles/${pstyle}-rc
	else
		dbg_msg $"BashStyle-NG Setting:" $"Fallback Prompt"
		dbg_log export PS1="\u@\h\w: "
	fi

	dbg_msg $"BashStyle-NG Setting:" $"PS2 PS3 PS4"
	PS2="$pscolor $ps234char$fontcolor "
	PS3="$pscolor $ps234char$ps234char$fontcolor "
	PS4="$pscolor $ps234char$ps234char$ps234char$fontcolor "

fi

dbg_log source ${BSNG_RC_DIR}/settings/options-rc

# by Richard Hansen https://stackoverflow.com/a/7287873

log () { printf '%s\n' "$*"; }
error () { log "ERROR: $*" >&2; }
fatal () { error "$@"; exit 1; }

trap_add () {
    trap_add_cmd=$1; shift || fatal "${FUNCNAME} usage error"
    for trap_add_name in "$@"; do
        trap -- "$(
            extract_trap_cmd() { printf '%s\n' "$3"; }
            eval "extract_trap_cmd $(trap -p "${trap_add_name}")"
            printf '%s\n' "${trap_add_cmd}"
        )" "${trap_add_name}" \
            || fatal "unable to add to trap ${trap_add_name}"
    done
}

declare -f -t trap_add

# do trapping stuff

if [[ $(ini_get colorshell) && ${enable_colors} == True ]]; then

	_colorshell () {
		cmd_text_colour='\[`tput setaf $((RANDOM%7))`\]'

		shopt -s promptvars

		PS1="${PS1}${cmd_text_colour}"
		PS2="${PS2}${cmd_text_colour}"
		PS3="${PS3}${cmd_text_colour}"
		PS4="${PS4}${cmd_text_colour}"

	}
	trap_add '_colorshell' DEBUG

	if [[ $(ini_get colorshell_reset) == True ]]; then

	_colorshell_reset () {
		echo -ne "\e[0m"
	}

		trap_add '_colorshell_reset' DEBUG
	fi
fi

if [[ $(ini_get history_sync) == True ]]; then

	_synchistory () {
		builtin history -a
		builtin history -c
		builtin history -r
	}

	trap_add '_synchistory' DEBUG

	history () {
		_sync_history
		builtin history
	}
fi

# remember last exit status and command
remember_command () {
    [ -n "$COMP_LINE" ] && return
    [ "$BASH_COMMAND" = "$PROMPT_COMMAND" ] && return
    [ "$BASH_COMMAND" = "trap *" ] && return
    [[ "$BASH_COMMAND" == *lastcommand* ]] && return
    [[ "$BASH_COMMAND" == *lastexit* ]] && return
    lastcommand=${BASH_COMMAND}
    lastcommandprintable=${BASH_COMMAND}
    if [ ${#lastcommandprintable} -gt 21 ]; then
	lastcommandprintable=${lastcommandprintable:0:21}
    elif [ ${#lastcommandprintable} -lt 21 ]; then
	x=$((21-${#lastcommandprintable}))
	while [ ${x} -gt 0 ]; do
	    lastcommandprintable="${lastcommandprintable} "
	    x=$((${x}-1))
	done
    fi
    lastexit=$?
}

trap_add 'remember_command' DEBUG

WelcomeMessage=$(ini_get welcome_message)

if [[ ${USER_BIRTHDAY} == $(date +%m-%d) && ! -e ~/.bday ]]; then
	cat ${BSNG_RC_DIR}/internal/birthday
	touch ~/.bday
elif [[ ${WelcomeMessage} != "" ]]; then
	dbg_msg $"BashStyle-NG Setting:" $"Welcome Message"
	dbg_log ${WelcomeMessage}
fi

[[ ${USER_BIRTHDAY} != $(date +%m-%d) && -e ${HOME}/.bday ]] && \
	rm -f ${HOME}/.bday

function lscd() {
	OLD_PWD=${PWD}
	clear

	if [[ -f "${1}" ]]; then
		builtin cd "${1%/*}" &>/dev/null
	elif [[ -d "${1}" ]]; then
		builtin cd "${1}" &>/dev/null
	elif [[ "${1}" == -*   ]]; then
		builtin cd "${*}" &>/dev/null
	elif [[ ! "${1}" ]]; then
		builtin cd
	elif [[ $(ini_get customcd_mkdir) == True ]]; then
		mkdir -p "${1}"
		builtin cd "${1}" &>/dev/null
	fi

	if [[ ${OLD_PWD} != ${PWD} ]]; then
		echo -e "\n${epink}content:\n"
		if [[ $(systemkit countvisibleitems) -gt 0 ]]; then
			ls $LSCD_OPTS
		else	echo -e "${ecream}-- empty --\n"
		fi
	fi

	echo "${PWD}" > ${HOME}/.lastpwd
}

function treecd () {
	OLD_PWD=${PWD}
	clear

	if [[ -f "${1}" ]]; then
		builtin cd "${1%/*}" &>/dev/null
	elif [[ -d "${1}" ]]; then
		builtin cd "${1}" &>/dev/null
	elif [[ "${1}" == -*   ]]; then
		builtin cd "${*}" &>/dev/null
	elif [[ ! "${1}" ]]; then
		builtin cd
	elif [[ $(ini_get customcd_mkdir) == True ]]; then
		mkdir -p "${1}"
		builtin cd "${1}" &>/dev/null
	fi

	if [[ ${OLD_PWD} != ${PWD} ]]; then
		echo -e "\n${epink}content:\n"
		if [[ $(systemkit countvisibleitems) -gt 0 ]]; then
			tree -L ${TREECD_OPTS}
		else	echo -e "${ecream}-- empty --\n"
		fi
	fi

	echo "${PWD}" > ${HOME}/.lastpwd
}

function reload () {
	#xk2c from commandlinefu.com
	builtin unalias -a
	builtin unset -f $(builtin declare -F | gawk '{print $3}')
	source @PROFILEDIR@/bashstyle.sh

}

[[ ${PATH} != *games* && -d /usr/games/ ]] && \
	export PATH="${PATH}:/usr/games/:/usr/local/games/"

[[ ${PATH} != *bashstyle-ng/rc* ]] && \
	export PATH="@DATADIR@/bashstyle-ng/rc/functions/:${PATH}:."

dbg_finalize
