#!/bin/bash
#########################################################
# 							#
# This is BashStyle-NG  				#
#							#
# Licensed under GNU GENERAL PUBLIC LICENSE v3    	#
#							#
# Copyright 2007 - 2015 Christopher Bratusek		#
#							#
#########################################################

. gettext.sh
TEXTDOMAIN="nx-rc"

export BSNG_PREFIX=@PREFIX@
export BSNG_DATA_DIR=@DATADIR@
export BSNG_RC_DIR=${BSNG_DATA_DIR}/bashstyle-ng/rc
export BSNG_VERSION=@VERSION@
export BSNG_YEAR="2007 - 2015"
INI_VERSION=17

if [[ ! -f ${HOME}/.bs-ng.ini ]]; then
	if [[ -f /etc/bs-ng_vendor.ini && $(grep ini_version /etc/bs-ng_vendor.ini) == *${INI_VERSION} ]]; then
		cp /etc/bs-ng_vendor.ini ${HOME}/.bs-ng.ini
	else
		cp ${BSNG_DATA_DIR}/bashstyle-ng/bs-ng.ini ${HOME}/.bs-ng.ini
	fi
fi

source ${BSNG_RC_DIR}/internal/misc
source ${BSNG_RC_DIR}/internal/logging

export BSNG_LOGFILE=${HOME}/.bashstyle.log
dbg_log rm -f $BSNG_LOGFILE
dbg_log touch $BSNG_LOGFILE

dbg_msg $"BashStyle-NG Starting"
dbg_msg $"BashStyle-NG Bash Major Version:" $(echo ${BASH_VERSINFO[0]})
dbg_msg $"BashStyle-NG Bash Minor Version:" $(echo ${BASH_VERSINFO[1]})
dbg_msg $"BashStyle-NG Bash Patch Level:" $(echo ${BASH_VERSINFO[2]})
dbg_msg $"BashStyle-NG Version:" ${BSNG_VERSION}
dbg_msg $"BashStyle-NG Prefix:" ${BSNG_PREFIX}
dbg_msg $"BashStyle-NG Debugging: Enabled"
dbg_msg $"BashStyle-NG Logfile:" ${BSNG_LOGFILE}

dbg_log shopt -s checkwinsize

[[ $(ini_get use_readlinecfg) == True ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/readline-rc

[[ $(ini_get use_vimcfg) == True ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/vim-rc

[[ $(ini_get use_nanocfg) == True ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/nano-rc

[[ $(ini_get enable_colors) == True ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/color-rc

[[ $(ini_get use_lscolors) == True && ${enable_colors} == True ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/ls-rc

[[ $(ini_get use_gitcfg) == True ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/git-rc

[[ $(ini_get use_keybindingscfg == True) ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/keybindings-rc

[[ $(ini_get colored_man) == True ]] && \
	dbg_log source ${BSNG_RC_DIR}/settings/man-rc

dbg_msg $"BashStyle-NG Setting:"  $"Shell Options"
dbg_log source ${BSNG_RC_DIR}/settings/shopt-rc

dbg_log source ${BSNG_RC_DIR}/settings/alias-rc

if [[ -e ${HOME}/.bashstyle.custom ]]; then
	dbg_msg $"BashStyle-NG Loading:" $"Custom Settings"
	dbg_log source ${HOME}/.bashstyle.custom
fi

if [[ $(ini_get use_bashstyle) == True ]]; then

	dbg_msg $"BashStyle-NG Loading:" $"BashStyle-NG"
	dbg_log source ${BSNG_RC_DIR}/styles/null-rc

	if [[ $(lsb_release -is) == Debian ]]; then
	#	if [[ ${1} == -r ]]; then
	#		START_LINE=$(sed -n '/^\#if \[ "$color_prompt" = yes/=' ~/.bashrc)
	#		if [[ ${START_LINE} ]]; then
	#			END_LINE=$((${START_LINE}+14))
	#			sed -e "${START_LINE},${END_LINE}s/^\#//" -i ~/.bashrc
	#		fi
	#	else
			START_LINE=$(sed -n '/^if \[ "$color_prompt" = yes/=' ~/.bashrc)
			if [[ ${START_LINE} ]]; then
				END_LINE=$((${START_LINE}+14))
				sed -e "${START_LINE},${END_LINE}s/^/\#/" -i ~/.bashrc
			fi
	#	fi
	fi

	dbg_msg $"BashStyle-NG Setting:" $"ps2 ps3 ps4 char" $(ini_get ps234)
	ps234char=$(ini_get ps234)

	if [[ $(ini_get random_style) == True ]]; then
		dbg_msg $"BashStyle-NG Setting:" $"Random Prompt"

		number=$(random -r 11)
		case ${number} in
			0 ) pstyle=separator ;;
			1 ) pstyle=vector ;;
			2 ) pstyle=clock ;;
			3 ) pstyle=equinox ;;
			4 ) pstyle=elite ;;
			5 ) pstyle=poweruser ;;
			6 ) pstyle=dirks ;;
			7 ) pstyle=dot_prompt ;;
			8 ) pstyle=sepa_ng ;;
			9 ) pstyle=quirk ;;
			10 ) pstyle=sputnik ;;
			11 ) pstyle=ayoli ;;
		esac

		dbg_msg $"BashStyle-NG Setting:" ${pstyle} $"randomly choosen"
	else
		pstyle=$(ini_get prompt_style)
		[[ ${pstyle} == clock-ad ]] && pstyle="equinox"
	fi

	use_custom_prompt=$(ini_get use_custom_prompt)

	if [[ ${use_custom_prompt} == True ]]; then
		dbg_msg $"BashStyle-NG Setting:" $"Custom Prompt"
		dbg_log source ${BSNG_RC_DIR}/styles/custom-rc
	elif [[ -e ${BSNG_RC_DIR}/styles/${pstyle}-rc ]]; then
		dbg_msg $"BashStyle-NG Setting:" ${pstyle} $"Prompt"
		dbg_log source ${BSNG_RC_DIR}/styles/${pstyle}-rc
	else
		dbg_msg $"BashStyle-NG Setting:" $"Fallback Prompt"
		dbg_log export PS1="\u@\h\w: "
	fi

	dbg_msg $"BashStyle-NG Setting:" $"PS2 PS3 PS4"
	PS2="$pscolor $ps234char$fontcolor "
	PS3="$pscolor $ps234char$ps234char$fontcolor "
	PS4="$pscolor $ps234char$ps234char$ps234char$fontcolor "

fi

dbg_log source ${BSNG_RC_DIR}/settings/options-rc

[[ ! ${PROMPT_COMMAND} ]] && USE_PROMPT_COMMAND=True

if [[ $(ini_get colorshell) && ${enable_colors} == True ]]; then
	USE_COLORSHELL=True
fi

if [[ $(ini_get history_sync) == True && ${USE_COLORSHELL} == True ]]; then
	if [[ ${USE_PROMPT_COMMAND} ]]; then
		PROMPT_COMMAND () {
			_colorshell
			_sync_history
			}
	else
		PRE_PROMPT_COMMAND () {
			_colorshell
			_sync_history
			}
	fi
	
	history () {
		_sync_history
		builtin history
	}
elif [[ ${USE_COLORSHELL} == True ]]; then
	if [[ ${USE_PROMPT_COMMAND} ]]; then
		PROMPT_COMMAND () {
			_colorshell
			}
	else
		PRE_PROMPT_COMMAND () {
			_colorshell
			}
	fi
elif [[ $(ini_get history_sync) == True ]]; then
	if [[ ${USE_PROMPT_COMMAND} ]]; then
		PROMPT_COMMAND () {
			_sync_history
			}
	else
		PRE_PROMPT_COMMAND () {
			_sync_history
			}
	fi

	history () {
		_sync_history
		builtin history
	}
fi

WelcomeMessage=$(ini_get welcome_message)

if [[ ${USER_BIRTHDAY} == $(date +%m-%d) && ! -e ~/.bday ]]; then
	cat ${BSNG_RC_DIR}/internal/birthday
	touch ~/.bday
elif [[ ${WelcomeMessage} != "" ]]; then
	dbg_msg $"BashStyle-NG Setting:" $"Welcome Message"
	dbg_log ${WelcomeMessage}
fi

[[ ${USER_BIRTHDAY} != $(date +%m-%d) && -e ${HOME}/.bday ]] && \
	rm -f ${HOME}/.bday

function lscd() {
	OLD_PWD=${PWD}
	clear

	if [[ -f "${1}" ]]; then
		builtin cd "${1%/*}" &>/dev/null
	elif [[ -d "${1}" ]]; then
		builtin cd "${1}" &>/dev/null
	elif [[ "${1}" == -*   ]]; then
		builtin cd "${*}" &>/dev/null
	elif [[ ! "${1}" ]]; then
		builtin cd
	elif [[ $(ini_get lscd_mkdir) == True ]]; then
		mkdir -p "${1}"
		builtin cd "${1}" &>/dev/null
	fi

	if [[ ${OLD_PWD} != ${PWD} ]]; then
		echo -e "\n${epink}content:\n"
		if [[ $(systemkit countvisibleitems) -gt 0 ]]; then
			ls $LSCD_OPTS
		else	echo -e "${ecream}-- empty --\n"
		fi
	fi

	echo "${PWD}" > ${HOME}/.lastpwd
}

function treecd () {
	builtin cd "${@}" &>/dev/null

	echo -e "${epink}content:"
	tree -L 1 ${TREE_OPTS}
	echo "${PWD}" > ${HOME}/.lastpwd
}

function reload () {
	#xk2c from commandlinefu.com
	builtin unalias -a
	builtin unset -f $(builtin declare -F | gawk '{print $3}')
	source @PROFILEDIR@/bashstyle.sh

}

dbg_finalize
